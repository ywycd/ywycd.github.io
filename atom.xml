<?xml version="1.0" encoding="utf-8" standalone="yes"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><title>ywy</title><id>https://ywycd.github.io/</id><description>Recent content on ywy</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><updated>2021-01-09T09:33:19Z</updated><link href="https://ywycd.github.io/atom.xml" rel="self" type="application/rss+xml"/><entry><title>自动签到</title><id>https://ywycd.github.io/post/auto-chekin/</id><link href="https://ywycd.github.io/post/auto-chekin/" rel="alternate" type="text/html"/><updated>2021-01-09T09:33:19Z</updated><published>2021-01-09T07:30:25Z</published><description>开始会打开各app、网站，后面停了就懒得继续，手动太累。签到升级，获得更多的权限。简单介绍下相关工具。 qiandao 17年注册，中间邮箱一直提示签到失败</description><content type="html"><![CDATA[
        <p>开始会打开各app、网站，后面停了就懒得继续，手动太累。签到升级，获得更多的权限。简单介绍下相关工具。</p>
<h2 id="qiandao">qiandao</h2>
<p>17年注册，中间邮箱一直提示签到失败，全停。后面发现可以自己添加网站签到，重新使用。有的模板已经无法使用。可能chrome版本问题，现在用cookies获取工具（已运行）老是一串代码，无法删除。只能修改变量，手动填写。</p>
<p>官方 








<a href="https://github.com/binux/qiandao" >github</a>








<a href="https://binux.blog/2014/09/introduction-to-qiandao-today/" >blog</a>                             








<a href="https://qiandao.today/" >地址</a> 








<a href="https://qiandao.binux.me/" >备用</a><br>
分支: <a href="https://github.com/AragonSnow/qiandao">https://github.com/AragonSnow/qiandao</a> 还在更新<br>









<a href="https://github.com/binux/qiandao/blob/master/docs/har-howto.md" >制作签到模板</a>  进行签到，保存har文件，上传网站，编辑测试。保存后新建签到，可选时间间隔。某网站已经维护三次，更了解一点（技术小白言）。 可以自行docker搭建。<br>









<a href="https://www.quchao.net/QianDaoEXP.html" >QianDao.today签到平台高级使用不完全手册</a><br>
获取cookies，万能F12。或者用








<a href="https://www.crx4chrome.com/extensions/embffhododclmgpnabmjmgoekpnoboic/" >Get Cookie For FPlus</a>插件。<br>
感谢








<a href="https://www.youtube.com/watch?v=Sj_YkhSEtk4" >discuz 点击签到模板视频</a> ，学到了formhash和日志输出。</p>
<h2 id="贴吧云签到">贴吧云签到</h2>
<p>源码








<a href="https://github.com/MoeNetwork/Tieba-Cloud-Sign" >github</a>  








<a href="https://www.tieba.ga/index.php?mod=login" >网友搭建</a> 运行好多年。中间网站打不开，搜索到action








<a href="https://github.com/ghosx/tieba" >签到贴吧</a>。</p>
<h2 id="哔哩哔哩签到">哔哩哔哩签到</h2>
<p>之前挂在qiandao，发现漫画也有








<a href="https://github.com/srcrs/BilibiliTask" >签到</a>。有漫画兑换需求，








<a href="https://github.com/happy888888/BiliExp" >这个</a>功能更多，但定时老是晚几十分钟。手动抢了几次，能不能抢到靠运气。其他下载功能好用。Secrets变量用EditThisCookie。</p>
<h2 id="魂签到">魂签到</h2>
<p>官方








<a href="https://github.com/inu1255/soulsign-chrome" >GitHub</a>，一个chrome的插件，可以自动签到，每天只要打开浏览器就可以自动签到，不用填写账号密码，不用手动抓取cookie，只需要 添加脚本+登录账号。








<a href="https://soulsign.inu1255.cn/" >脚本发布站点</a>。








<a href="https://www.heji.ltd/405.html#" >该网站</a>介绍。</p>
<h2 id="其他">其他</h2>
<p>单网站，搜索网站+签到，看有没有前人造轮子。</p>

      ]]></content></entry><entry><title>路由器刷机记录</title><id>https://ywycd.github.io/post/router-record/</id><link href="https://ywycd.github.io/post/router-record/" rel="alternate" type="text/html"/><updated>2020-12-23T11:53:35Z</updated><published>2020-12-22T12:35:56Z</published><description>最开始买的tp-link，宿舍上了斐迅0元购（辛酸泪），接触刷机 恩山和 拆机。官改-breed刷高格-openwrt-Padavan养老。刷高</description><content type="html"><![CDATA[
        <p>最开始买的tp-link，宿舍上了斐迅0元购（辛酸泪），接触刷机








<a href="https://www.right.com.cn/forum/forum.php" >恩山</a>和








<a href="https://www.acwifi.net/" >拆机</a>。官改-breed刷高格-openwrt-Padavan养老。刷高格是为了多拨，实际未使用。高格改版（有纯净版加插件），插件添加失败，转到op阵营。op有一贴分享精简加插件，接触编译。杜绝隔段时间就刷机，换成老毛子。</p>
<h2 id="固件">固件</h2>
<p>恩山搜索型号，看有哪些固件可刷。目前有在使用op（插件丰富）、老毛子。








<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=344825&amp;extra=page%3D2%26filter%3Ddigest%26digest%3D1" >op插件</a>结合








<a href="https://github.com/coolsnowwolf/lede" >lede</a>说明编译，自建虚拟机科学或








<a href="https://p3terx.com/archives/build-openwrt-with-github-actions.html" >action</a>，曾经出现过








<a href="https://www.right.com.cn/forum/thread-1573038-1-1.html" >gitpod</a>。老毛子有








<a href="https://github.com/hanwckf/rt-n56u" >hanwckf</a>、








<a href="https://github.com/chongshengB/Padavan-build" >chongshengB</a>，感谢移植第一人荒野无灯，同样有








<a href="https://github.com/muziling/Padavan-build" >Action</a>。换hanwckf源插件添加不了，上虚拟机编译，没追新。</p>
<h2 id="插件">插件</h2>
<p>科学，别人分享的实操失败，不得不提ssr+/clash好用，设备上基本都换成小猫咪。<br>
DNS污染，tracker无法访问，开始dns-forwarder有用。后续失效








<a href="https://blog.minidump.info/2019/12/enhanced-coredns/" >修改版coredns</a>部署失败，换新域名解决。去广告，电脑用过adbyby，现在主要用uBlock Origin,订阅








<a href="https://gitee.com/halflife/list/raw/master/ad.txt" >halflife</a>，局域网adghome。<br>
内网vpn。编译过老毛子里的vpn，只有softethervpn成功，还有其他方案。</p>
<h2 id="ddns">DDNS</h2>
<p>动态公网ip，ddns域名+端口实现外网访问，远程操作。op的ddns脚本在<code>Network→IP Addresses and Names</code>选取。选








<a href="https://v2ex.com/t/560093" >哪家</a>,目前使用noip,he.net,cf，noip需要每30天激活，he需要域名，注册免费域名推荐freenom。<br>
但cf限制.tk等免费域名使用api，无法ddns、acme.sh。Github上有好多优秀工具。老毛子自带inadyn出错，运行curl提示<code>(60) Cert verify failed</code>。借用某人脚本，加上-sk可行,cf的








<a href="https://ignorance.nova.moe/ddns-with-cloudflare/" >curl</a>。wan重连运行脚本，不用隔5分钟测ip变化。老毛子添加脚本，<strong>系统管理-配置管理-保存</strong>，不然重启丢失。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">curl -sk -4 <span class="s2">&#34;https://dyn.example.com:password@dyn.dns.he.net/nic/update?hostname=dyn.example.com&#34;</span>					
curl -sk https://username:password@dynupdate.no-ip.com/nic/update?hostname<span class="o">=</span>example.com

<span class="nv">home_ip</span><span class="o">=</span><span class="k">$(</span>curl ip.sb<span class="k">)</span>
curl -sk -X PUT <span class="s2">&#34;https://api.cloudflare.com/client/v4/zones/&lt;域名的 ZoneID&gt;/dns_records/&lt;Record 的 ZoneID&gt;&#34;</span> <span class="se">\
</span><span class="se"></span>     -H <span class="s2">&#34;Authorization: Bearer xxxxxxx&#34;</span> <span class="se">\
</span><span class="se"></span>     -H <span class="s2">&#34;Content-Type: application/json&#34;</span> <span class="se">\
</span><span class="se"></span>     --data <span class="s1">&#39;{&#34;type&#34;:&#34;A&#34;,&#34;name&#34;:&#34;home.nova.moe&#34;,&#34;content&#34;:&#34;&#39;</span><span class="nv">$home_ip</span><span class="s1">&#39;&#34;,&#34;ttl&#34;:120,&#34;proxied&#34;:false}&#39;</span>

</code></pre></div><h2 id="内网穿透">内网穿透</h2>
<p>使用frp，主要小钢炮自带。








<a href="https://www.ioiox.com/frp.html" >这家</a>，








<a href="https://www.iyuu.cn/archives/286/" >自建服务器</a>教程。frp更新</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">wget https://github.com/fatedier/frp/releases/download/v0.34.1/frp_0.34.1_linux_arm64.tar.gz
tar -zxvf frp_0.34.1_linux_arm64.tar.gz
</code></pre></div><p><strong>光猫没事别恢复出厂设置，别恢复，别恢复</strong> 出厂后原来破解方法失效，拆机ttl有点麻烦，应该是配置升级原因。可找客服改桥接。10001按4快速报修，但AI简直智障，选宽带报修，检测正常重启，然后就自动挂掉了！！！








<a href="http://192.168.1.1/bridge_route.gch" >自助修改</a>。</p>

      ]]></content></entry><entry><title>hugo通过Github Action部署到Github Pages</title><id>https://ywycd.github.io/post/hugo-actions-gh-pages/</id><link href="https://ywycd.github.io/post/hugo-actions-gh-pages/" rel="alternate" type="text/html"/><updated>2020-12-19T14:20:32Z</updated><published>2020-12-19T13:16:07Z</published><description>通过Action部署到Github Pages。查了一些资料，有点不知道下一步。terminal修改后考虑部署到github，之前用even主</description><content type="html"><![CDATA[
        <p>通过Action部署到Github Pages。查了一些资料，有点不知道下一步。terminal修改后考虑部署到github，之前用even主题到netlify。<br>
本地win有hugo文档，部署到git仓库，查阅有建私人仓库、其他repositories。简单点username.github.io建两个branch。</p>
<h2 id="上传xxgithubio">上传xx.github.io</h2>
<p>添加远程，分支提示无法建立，切换分支、加ssh不行。加ssh key提示已使用，不是正确的密钥。看








<a href="https://github.com/peaceiris/actions-gh-pages" >gh-pages</a> 有提。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ssh-keygen -t rsa -b <span class="m">4096</span> -C <span class="s2">&#34;</span><span class="k">$(</span>git config user.email<span class="k">)</span><span class="s2">&#34;</span> -f gh-pages -N <span class="s2">&#34;&#34;</span>
<span class="c1"># You will get 2 files:</span>
<span class="c1">#   gh-pages.pub (public key)</span>
<span class="c1">#   gh-pages     (private key)</span>
</code></pre></div><p>重建key，clip &lt; ~/.ssh/xxx.pub复制到Deploy Keys。  具体步骤如下，等待上传。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">git checkout -b main
git add .
git commit -m <span class="s2">&#34;first commit&#34;</span>
git push origin main
</code></pre></div><h2 id="部署action">部署action</h2>
<p>win无法新建.github文件夹，用git bash mkdir。建立<code>.github/workflows/gh-pages.yml</code>看文档做修改。新建名为ACTIONS_DEPLOY_KEY的Secrets，内容上面生成的私钥。git push后自动生成分支。</p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml"><span class="k">name</span><span class="p">:</span><span class="w"> </span>github<span class="w"> </span>pages<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- main<span class="w">  
</span><span class="w">
</span><span class="w"></span><span class="k">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">runs-on</span><span class="p">:</span><span class="w"> </span>ubuntu<span class="m">-18.04</span><span class="w">
</span><span class="w">    </span><span class="k">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="k">uses</span><span class="p">:</span><span class="w"> </span>actions/checkout@v2<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  
</span><span class="w">          </span><span class="k">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">    
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Setup<span class="w"> </span>Hugo<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>peaceiris/actions-hugo@v2<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0.74.3&#39;</span><span class="w">
</span><span class="w">          </span><span class="k">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Build<span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>hugo<span class="w"> </span>--minify<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Deploy<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>peaceiris/actions-gh-pages@v3<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">deploy_key</span><span class="p">:</span><span class="w"> </span>${{<span class="w"> </span>secrets.ACTIONS_DEPLOY_KEY<span class="w"> </span>}}<span class="w">
</span><span class="w">          </span><span class="k">publish_dir</span><span class="p">:</span><span class="w"> </span>./public<span class="w">
</span><span class="w">          </span><span class="k">commit_message</span><span class="p">:</span><span class="w"> </span>${{<span class="w"> </span>github.event.head_commit.message<span class="w"> </span>}}<span class="w">
</span></code></pre></div><h2 id="访问问题">访问问题</h2>
<p>推送后默认改为gh-pages。访问xx.github.io显示404，以为没加README.md。Settings里GitHub Pages Source下切换分支，可行。<br>
修改terminal，灯大说的那些用上一些。折腾主题时间大于写博客，还是记录点东西吧。</p>

      ]]></content></entry><entry><title>小钢炮ssh设置密钥登录（免密）</title><id>https://ywycd.github.io/post/ndm-ssh-key/</id><link href="https://ywycd.github.io/post/ndm-ssh-key/" rel="alternate" type="text/html"/><updated>2020-12-19T14:20:32Z</updated><published>2020-12-19T12:19:05Z</published><description>小钢炮设置 密钥认证，无需密码。 第一步 生成密钥对 #用dropbearkey生成密钥对 path=/etc/dropbear #生成私钥的地方，可随意填写 dropbearkey -t rsa -f ${path}/key_dropbear -s 2048 #保存公钥到~</description><content type="html"><![CDATA[
        <p>小钢炮设置








<a href="https://www.jianshu.com/p/0c8c00fb1f79" >密钥认证</a>，无需密码。<br>
<strong>第一步 生成密钥对</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1">#用dropbearkey生成密钥对</span>
<span class="nv">path</span><span class="o">=</span>/etc/dropbear <span class="c1">#生成私钥的地方，可随意填写</span>
dropbearkey -t rsa -f <span class="si">${</span><span class="nv">path</span><span class="si">}</span>/key_dropbear -s <span class="m">2048</span>
<span class="c1">#保存公钥到~/.ssh/authorized_keys</span>
dropbearkey -t rsa -f <span class="nv">$path</span>/key_dropbear -s <span class="m">2048</span> -y <span class="p">|</span> sed -n 2p &gt; ~/.ssh/authorized_keys
<span class="c1">#转换私钥成可以读取的文件</span>
dropbearconvert dropbear openssh <span class="si">${</span><span class="nv">path</span><span class="si">}</span>/key_dropbear <span class="si">${</span><span class="nv">path</span><span class="si">}</span>/key_openssh
<span class="c1">#打印私钥</span>
cat <span class="si">${</span><span class="nv">path</span><span class="si">}</span>/key_openssh <span class="c1">#把私钥复制到记事本备用</span>
</code></pre></div><p>也可 ip地址/admin/system/admin 网页添加。运行上面后发现保存公钥提示无法打开目录，修改下。原来是在恩山看到作者，后面无意发现简书地址。<br>
<strong>第二步 禁用密码登录</strong><br>
修改<code>/etc/init.d/S50dropbear</code>文件，第 10 行添加“-s”参数。如<code>DROPBEAR_ARGS=&quot;$DROPBEAR_ARGS -R -s&quot;</code>。其他-p 要开启的ssh端口。注意备份,保存并重启。<code>./etc/init.d/S50dropbear restart</code>或startup处重启。</p>

      ]]></content></entry><entry><title>下载私人仓库和SSH认证</title><id>https://ywycd.github.io/post/github-ssh-key-and-private-repositories/</id><link href="https://ywycd.github.io/post/github-ssh-key-and-private-repositories/" rel="alternate" type="text/html"/><updated>2020-12-19T14:20:32Z</updated><published>2020-12-04T08:41:58Z</published><description>下载私人仓库 博客内容在私人仓库，现在想下载到电脑上备着，后面继续记录。 查阅发现git clone https://myusername@github.c</description><content type="html"><![CDATA[
        <h2 id="下载私人仓库">下载私人仓库</h2>
<p>博客内容在私人仓库，现在想下载到电脑上备着，后面继续记录。</p>
<p>查阅发现<code>git clone https://myusername@github.com/ownersusername/repo_name.git</code>有用，其他出错/要权限（win git bash创建不了文件换cmd下载）。下载到电脑、小钢炮。小钢炮输密码（clone、push）不方便，研究如何ssh验证。无法使用ssh-keygen，电脑复制过去不行。</p>
<h2 id="ssh认证">SSH认证</h2>
<p>生成密钥<code>ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</code>，普通人一路回车。复制密钥（记得修改）<code>clip &lt; ~/.ssh/id_ed25519.pub</code> 。








<a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh" >详见</a>  点击头像-Settings-SSH and GPG keys新增，取名随意，区分开来。测试连接<code>ssh -T git@github.com</code>。</p>
<pre><code>Hi username! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre><p>提示这个，恭喜配置成功。</p>
<p><strong>小钢炮只能另辟蹊径</strong> ssh-keygen不存在。开始用








<a href="https://bbs.hassbian.com/thread-8491-1-1.html" >ssh-copy-id root@n1地址</a>失败。复制电脑key过去无用。ssh -T提示<code>Connection to git@github.com:22 exited: No auth methods could be used.</code>感谢那个








<a href="https://forum.archive.openwrt.org/viewtopic.php?id=47551" >久远的帖子</a>。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Generate your identity key on openwrt</span>
dropbearkey -t rsa -f ~/.ssh/id_rsa
<span class="c1"># Convert public key from dropbear binary to openssh text</span>
<span class="c1"># Copy and paste output from below to bitbucket account ssh keys</span>
dropbearkey -y -f ~/.ssh/id_rsa <span class="p">|</span> head -n <span class="m">2</span> <span class="p">|</span> tail -1
<span class="c1"># Change git ssh command</span>
<span class="nb">echo</span> <span class="s2">&#34;#!/bin/sh&#34;</span> &gt; ~/.gitssh.sh
<span class="nb">echo</span> <span class="s2">&#34;dbclient -y -i ~/.ssh/id_rsa \$*&#34;</span> &gt;&gt; ~/.gitssh.sh
chmod +x ~/.gitssh.sh
<span class="nb">echo</span> <span class="s2">&#34;export GIT_SSH=\$HOME/.gitssh.sh&#34;</span> &gt;&gt; /etc/profile
<span class="c1"># Now login again to openwrt</span>
<span class="c1"># Now use git (finally)</span>
git clone git@github.com:&lt;user&gt;/&lt;repo&gt;.git
</code></pre></div><p>运行时提示dbclient: Exited: Error resolving &lsquo;$*&rsquo; port &lsquo;22&rsquo;. Name or service not known。看最后回复修改后成功。<br>
内置的是dropbear，通过转换才行。<code>ssh -i .ssh/id_rsa git@github.com</code>测试连接。<br>
<code>git clone git@github.com:username/repo_name.git</code>无需密码，上面地址要输。</p>
<h2 id="git-config设置">git config设置</h2>
<p>git config &ndash;global user.name &ldquo;John Doe&rdquo;</p>
<p>git config &ndash;global user.email &ldquo;<a href="mailto:johndoe@example.com">johndoe@example.com</a>&rdquo;</p>
<p>设置








<a href="https://www.v2ex.com/t/641227" >代理</a>  git config &ndash;global http.proxy &lsquo;socks5h://localhost:port&rsquo;<br>
查看配置<code>git config -l</code></p>

      ]]></content></entry><entry><title>Bitwarden服务器搭建记录</title><id>https://ywycd.github.io/post/build-my-bitwarden/</id><link href="https://ywycd.github.io/post/build-my-bitwarden/" rel="alternate" type="text/html"/><updated>2020-12-19T11:13:26Z</updated><published>2020-12-02T05:50:42Z</published><description>N多人推荐bitwarden，群友介绍下也起了自建的念头。过程也踩了好多坑，终于部署成功。选择了 bitwarden_rs第三方版，轻量而且高</description><content type="html"><![CDATA[
        <p>N多人推荐bitwarden，群友介绍下也起了自建的念头。过程也踩了好多坑，终于部署成功。选择了








<a href="https://github.com/dani-garcia/bitwarden_rs" >bitwarden_rs</a>第三方版，轻量而且高级功能免费。安装教程也多。</p>
<h2 id="准备">准备</h2>
<p>机器上安装好docker，域名，https代理工具（nginx等）</p>
<h2 id="安装">安装</h2>
<p><code>docker pull bitwardenrs/server:latest</code></p>
<p>相关配置</p>
<div class="highlight"><pre class="chroma"><code class="language-docker" data-lang="docker">docker run -d --name bitwarden <span class="se">\
</span><span class="se"></span>  -e <span class="nv">SIGNUPS_ALLOWED</span><span class="o">=</span><span class="nb">true</span> <span class="se">\
</span><span class="se"></span>  -e <span class="nv">WEBSOCKET_ENABLED</span><span class="o">=</span><span class="nb">true</span> <span class="se">\
</span><span class="se"></span>  -e <span class="nv">LOG_FILE</span><span class="o">=</span>/data/bitwarden.log <span class="se">\
</span><span class="se"></span>  -e <span class="nv">DOMAIN</span><span class="o">=</span>https://bitwarden.example.tld/vault/ <span class="se">\
</span><span class="se"></span>  -p 8880:80 <span class="se">\
</span><span class="se"></span>  -p 3012:3012 <span class="se">\
</span><span class="se"></span>  -v /bw-data/:/data/ <span class="se">\
</span><span class="se"></span>  bitwardenrs/server:latest<span class="err">
</span></code></pre></div><p>也可用Docker Compose运行。<del>主机上用Compose遇到localhost:port timeout。经常提示容器名已存在（未运行成功），<code>docker ps</code>又找不到相关。无奈放弃。</del></p>
<h2 id="设置nginx">设置Nginx</h2>
<p>主机有nginx，抄教程运行成功。但这样自带流量统计页404。<del>开始还以为是另外配置的云监控弄的，注释掉无用。发现是<code>location / {</code>问题。</del> wiki有








<a href="https://github.com/dani-garcia/bitwarden_rs/wiki/Proxy-examples" >sub-path</a>例子。</p>
<div class="highlight"><pre class="chroma"><code class="language-nginx" data-lang="nginx"><span class="c1"># Define the server IP and ports here.
</span><span class="c1"></span><span class="k">upstream</span> <span class="s">bitwardenrs-default</span> <span class="p">{</span> <span class="kn">server</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">8880</span><span class="p">;</span> <span class="p">}</span>
<span class="k">upstream</span> <span class="s">bitwardenrs-ws</span> <span class="p">{</span> <span class="kn">server</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">3012</span><span class="p">;</span> <span class="p">}</span>

<span class="c1"># Redirect HTTP to HTTPS
</span><span class="c1"></span><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
    <span class="kn">server_name</span> <span class="s">bitwardenrs.example.tld</span><span class="p">;</span>
    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span> <span class="mi">443</span> <span class="s">ssl</span> <span class="s">http2</span><span class="p">;</span>
    <span class="kn">listen</span> <span class="s">[::]:443</span> <span class="s">ssl</span> <span class="s">http2</span><span class="p">;</span>
    <span class="kn">server_name</span> <span class="s">bitwardenrs.example.tld</span><span class="p">;</span>

    <span class="c1"># Specify SSL Config when needed
</span><span class="c1"></span>    <span class="c1">#ssl_certificate /path/to/certificate/letsencrypt/live/bitwardenrs.example.tld/fullchain.pem;
</span><span class="c1"></span>    <span class="c1">#ssl_certificate_key /path/to/certificate/letsencrypt/live/bitwardenrs.example.tld/privkey.pem;
</span><span class="c1"></span>    <span class="c1">#ssl_trusted_certificate /path/to/certificate/letsencrypt/live/bitwardenrs.example.tld/fullchain.pem;
</span><span class="c1"></span>
    <span class="kn">client_max_body_size</span> <span class="s">128M</span><span class="p">;</span>

    <span class="c1">## Using a Sub Path Config
</span><span class="c1"></span>    <span class="c1"># Path to the root of your installation
</span><span class="c1"></span>    <span class="kn">location</span> <span class="s">/vault/</span> <span class="p">{</span>
      <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
      <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
      <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
      <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-Proto</span> <span class="nv">$scheme</span><span class="p">;</span>

      <span class="kn">proxy_pass</span> <span class="s">http://bitwardenrs-default</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kn">location</span> <span class="s">/vault/notifications/hub/negotiate</span> <span class="p">{</span>
      <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
      <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
      <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
      <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-Proto</span> <span class="nv">$scheme</span><span class="p">;</span>

      <span class="kn">proxy_pass</span> <span class="s">http://bitwardenrs-default</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kn">location</span> <span class="s">/vault/notifications/hub</span> <span class="p">{</span>
      <span class="kn">proxy_set_header</span> <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
      <span class="kn">proxy_set_header</span> <span class="s">Connection</span> <span class="nv">$http_connection</span><span class="p">;</span>
      <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>

      <span class="kn">proxy_pass</span> <span class="s">http://bitwardenrs-ws</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1"># Optionally add extra authentication besides the ADMIN_TOKEN
</span><span class="c1"></span>    <span class="c1"># If you don&#39;t want this, leave this part out
</span><span class="c1"></span>    <span class="kn">location</span> <span class="s">^~</span> <span class="s">/vault/admin</span> <span class="p">{</span>
      <span class="c1"># See: https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/
</span><span class="c1"></span>      <span class="kn">auth_basic</span> <span class="s">&#34;Private&#34;</span><span class="p">;</span>
      <span class="kn">auth_basic_user_file</span> <span class="s">/path/to/htpasswd_file</span><span class="p">;</span>

      <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
      <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
      <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
      <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-Proto</span> <span class="nv">$scheme</span><span class="p">;</span>

      <span class="kn">proxy_pass</span> <span class="s">http://bitwardenrs-default</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div><p>在nginx文件做相应修改。家里nas也试过跑docker，但最后找不到网页。<em>没配置https环境，装了nginx，提示配置文件出错。设置frp穿透域名，无法访问。ip+端口失败。</em></p>
<h2 id="网页客户端">网页、客户端</h2>
<p>输入对应网址可打开网页。开始显示<code>502 bad gateway</code>，搜索查了下是加上限制。<strong>最重要还是上面端口没改成对应。</strong> 创建账户，导入keepass数据（导出相应格式，网页端导入），要等会。<br>
体验了安卓版，先连接到自建服务器。可自动填充，创建账户密码会提示是否保存到bitwarden。但TOTP空白，还以为跟kp一样。<del>chrome内核浏览器/原来有包名无法填充</del>第二天看文档，加别人指点，发现空白是填key，后面复制。包名是格式不一样，等有时间统一修改。浏览器可安装扩展。</p>
<h2 id="备份恢复">备份恢复</h2>
<p>主要是sqlite3数据库文件，其他bw-data目录有附件文件夹、图标缓存文件夹、密钥等。</p>
<p><em>设置nginx过程顺便解决了








<a href="http://freetribe.me/691.html" >云监控</a>问题。开始是docker跑，映射html，中途无法访问。</em>   惯例搜索，记录解决方法。</p>
<div class="highlight"><pre class="chroma"><code class="language-nginx" data-lang="nginx"><span class="k">location</span> <span class="s">/ss</span> <span class="p">{</span>
    <span class="kn">index</span> <span class="s">index.html</span><span class="p">;</span>
    <span class="kn">alias</span> <span class="s">/usr/local/ServerStatus/web/</span><span class="p">;</span>
    <span class="kn">autoindex</span> <span class="no">on</span><span class="p">;</span>
   <span class="p">}</span>
</code></pre></div><h2 id="进阶">进阶</h2>
<p>设置-域名规则，可设置通用网站（域名不同账密相同）。实际加了两个通用（如淘宝支付宝、微博新浪），测试只有淘宝新浪有填充，显示2个。另外添加也不行。在淘宝新建URI，选默认匹配检测，下面几项具体看








<a href="https://bitwarden.com/help/article/uri-match-detection/" >文档</a>。只剩微博一项就可以匹配成功。后续都在项目里新添URI。<br>
看了下








<a href="https://bitwarden.com/help/article/custom-fields/" >自定义字段</a>说明，不是想象中简单的备注。看了下YT视频，回来发现说明里是动图。简单说获取网页输入框的ID，填写自定义字段（名称ID，值内容），保存后会自动填充。后续网站如果需要多步验证可以设置。<br>
关闭用户注册、网页端</p>
<pre><code>SIGNUPS_ALLOWED=false
WEB_VAULT_ENABLED=false
</code></pre>
      ]]></content></entry><entry><title>记录docker运行容器</title><id>https://ywycd.github.io/post/docker-running-containers/</id><link href="https://ywycd.github.io/post/docker-running-containers/" rel="alternate" type="text/html"/><updated>2020-12-18T06:46:45Z</updated><published>2020-11-15T22:21:11Z</published><description>docker各平台都有，转移方便。使用时注意选对应平台。不用时可删除。 portainer（网页管理）、nginx 80x86/typecho 安装使用方便，自带主题、插</description><content type="html"><![CDATA[
        <p>docker各平台都有，转移方便。使用时注意选对应平台。不用时可删除。</p>
<ul>
<li>portainer（网页管理）、nginx</li>
<li>80x86/typecho
安装使用方便，自带主题、插件够用。</li>
<li>adguardhome
广告屏蔽。目前是安在旁路由上，主路由DNS指向旁路由。</li>
<li>openwrt
旁路由有些功能受限。跑op是为了科学，装插件等。Github上有工具自动编译，本地和网上都尝试过。</li>
<li>clash
当时嫌弃openclash不稳定，修改配置就失效。东拼西凑写好配置，运行成功。目前主要浏览器插件使用。新版配置文件要改，没升级。<code>subconverter</code>订阅转换。</li>
<li>PT
灯大修改版qb、filebrowser,IYUU,flexget etc</li>
<li>enshan









<a href="https://www.right.com.cn/forum/thread-911375-1-1.html" >大佬</a>移植到N1的镜像。sshd ssh跳板。freenom 域名续期。chfs 网盘支持webdav。添加用户<code>docker exec chfs addusr 用户名 密码 权限</code></li>
<li>noip









<a href="https://github.com/simao-silva/noip-renewer" >自动续期</a>之前有另一个大佬的方案，但搬不到arm64，试过alpine，放弃。开始家里机器显示finished，但没续期。后来上vps提示host xx confirmed。加了定时任务、docker代理，看后续是否续期。</li>
</ul>
<p>TBC&hellip;.</p>

      ]]></content></entry><entry><title>茅塞顿开</title><id>https://ywycd.github.io/post/mao-se-dun-kai/</id><link href="https://ywycd.github.io/post/mao-se-dun-kai/" rel="alternate" type="text/html"/><updated>2020-12-18T06:46:45Z</updated><published>2020-11-15T14:13:09Z</published><description>破解光猫 按步就班 n1 smb 一直无法识别。照这篇n1开master，成功。原来padavan也有smb服务。 小钢炮其他设置 aria2一直出错，看后发</description><content type="html"><![CDATA[
        <p>








<a href="https://www.hellozjx.com/2019/08/13/f612/" >破解光猫</a> 按步就班</p>
<p>








<a href="https://nanodm.net/post/nanodm/samba-sharing-auto-discovery-configuration-under-padavan-router/" >n1 smb</a> 一直无法识别。照这篇n1开master，成功。原来padavan也有smb服务。</p>
<p>








<a href="https://post.smzdm.com/p/a78e0x0o/" >小钢炮其他设置</a> aria2一直出错，看后发现要新建目录。和tr一样必须Dashboard改。如果有注意log也会发现。</p>
<p>








<a href="https://www.v2fly.org/chapter_02/03_routing.html" >添加cccat黑名单</a> 网上看到格式，复制进去没用。照其他示例删减不行。看介绍移到routing前面改了下格式，选domain成功。</p>
<p>








<a href="https://www.right.com.cn/forum/thread-529613-1-1.html" >小钢炮挂载</a> 停电后大硬盘无法挂载。搜索了下，去掉openwrt挂载未分配硬盘。按这贴加了sdb分区，在启动加了mount /dev/sdb /mnt/sdb。后续再通电可以直接挂载了。</p>

      ]]></content></entry><entry><title>Nian Tips</title><id>https://ywycd.github.io/post/nian-tips/</id><link href="https://ywycd.github.io/post/nian-tips/" rel="alternate" type="text/html"/><updated>2021-01-07T10:14:33Z</updated><published>2020-11-11T01:43:59Z</published><description>那两篇用户心得已经具体介绍念如何使用这里就不多做重复，主要讲收集到的小技巧或者彩蛋。分部分来讲下。 首页 长按添加记本，可自定义内容，改成你想显</description><content type="html"><![CDATA[
        <p><del>那两篇用户心得已经具体介绍念如何使用</del>这里就不多做重复，主要讲收集到的小技巧或者彩蛋。分部分来讲下。</p>
<h2 id="首页">首页</h2>
<p>





    
        
    


<a class="post-img-lb" href="https://ywycd.github.io/post/nian-tips/nian-home.jpg" data-caption="nian-home">
    <img src="https://ywycd.github.io/post/nian-tips/nian-home.jpg" alt="nian-home"  />
</a>
长按添加记本，可自定义内容，改成你想显示的。</p>
<p>双击标准记本可直接新建进展，双击打卡记本直接打卡。打卡、计时支持NFC。</p>
<p>长按记本可拖动排序。<code>2.6.0</code>及其之后要到第一屏<code>记本排序</code>里修改。</p>
<p>首页摇一摇随机进展，可添加回应，也会出现添加补录次数。往左滑，显示最近的进展。<code>2.5.1</code>「最近进展」页新增计时、账本、打卡进展。<code>2.7.0</code>可自定义进展项。实验室「首页进展列表-自定义显示范围」，设置各类记本进展是否显示。类似<code>2.7.1</code>更新时段右上角可选择单个记本.</p>
<p>点击头像，进展滑过x</p>
<h2 id="记本">记本</h2>
<p>





    
        
    


<a class="post-img-lb" href="https://ywycd.github.io/post/nian-tips/nian-jiben.jpg" data-caption="nian-jiben">
    <img src="https://ywycd.github.io/post/nian-tips/nian-jiben.jpg" alt="nian-jiben"  />
</a>
长按进展可直接编辑。如有链接要按底部时间那行。</p>
<p>长按更多按钮（三个点），可快速复制。</p>
<h2 id="进展编辑">进展编辑</h2>
<p>





    
        
    


<a class="post-img-lb" href="https://ywycd.github.io/post/nian-tips/nian-newjinzhan.jpg" data-caption="nian-newjinzhan">
    <img src="https://ywycd.github.io/post/nian-tips/nian-newjinzhan.jpg" alt="nian-newjinzhan"  />
</a>
右上角有小工具，可左滑添加相应项。<code>2.5.1</code>实验室-进展编辑页-自定义工具栏，可长按拖动排序。</p>
<p>点击字数，隐藏工具栏。如果不统一，实验室里关闭进展编辑页临时修复。</p>
<h2 id="其他">其他</h2>
<p>设置-关于，点击宠物，会出现时间进度条（自己发现）。</p>
<p>设置倒计时xx天，进展以2020-05-21 格式为开头。新版有纪念日/倒数日，但无法添加到桌面。</p>
<p>自带小工具，满减计算、日期间隔、休闲娱乐。新增临时文本。双击文本可以改变左右位置，长按可选择复制或删除，可记录琐碎的文本，自问自答也可。</p>
<p>常驻通知，可选特定记本。摘抄或补录时可用。补录可用<code>补录进展</code>（<code>2.2.0</code>放宽至每月30次），或者手动修改时间再写。</p>
<h2 id="同步">同步</h2>
<p>自动轻备份，在backups目录，只有文本数据。如果不小心清理空间时误删，可手动把 xx.bak 改为 nian.db 放到 nian 文件夹中即可。</p>
<p>文件夹说明，nian存放图片（默认为剪切，可到实验室关闭）、文本。 nian_audio音频， nian_video视频，插入视频时，最好放到nian_video下，再选择插入。清理空间记得加入白名单。</p>
<p>个人是隔段时间备份，用syncthing同步到家里电脑，上传网盘。<code>2.5.1</code>及其之后无自带备份，需手动压缩备份。</p>
<p>或者用FolderSync（莴笋_君推荐）同步文件。其他同步工具也可。具体教程可看这里 <a href="https://www.coolapk.com/feed/21594226">https://www.coolapk.com/feed/21594226</a></p>
<h2 id="更新">更新</h2>
<p>记账 长按确认可以不退出页面记下一笔；长按顶部标题可在支出和收入之间切换。</p>
<p>计时:






    
        
    


<a class="post-img-lb" href="https://ywycd.github.io/post/nian-tips/jishi01.png" data-caption="jishi01">
    <img src="https://ywycd.github.io/post/nian-tips/jishi01.png" alt="jishi01"  />
</a>
走动的时间数字是可以点击展开全屏的。






    
        
    


<a class="post-img-lb" href="https://ywycd.github.io/post/nian-tips/jishi02.png" data-caption="jishi02">
    <img src="https://ywycd.github.io/post/nian-tips/jishi02.png" alt="jishi02"  />
</a>
中间的色环点击进入纯黑模式。</p>
<p>记本归类:  第一屏-记本标签，打上同一个标签，首页就会归到同一文件夹下。






    
        
    


<a class="post-img-lb" href="https://ywycd.github.io/post/nian-tips/sort.png" data-caption="sort">
    <img src="https://ywycd.github.io/post/nian-tips/sort.png" alt="sort"  />
</a>
<del>保存喜欢的歌曲by你瞅瞅你。录制音频保存。移动歌曲到nian_audio文件夹。重命名，如“audio_2020_11_13_09_09”，同时删掉原来的音频。歌词复制到进展即可。</del> 新版已去除录音功能，添加本地音乐，参考Retro Music Player。






    
        
    


<a class="post-img-lb" href="https://ywycd.github.io/post/nian-tips/gequ.png" data-caption="gequ">
    <img src="https://ywycd.github.io/post/nian-tips/gequ.png" alt="gequ"  />
</a></p>
<p><em>不知不觉也写了这么久</em>。有的功能，比如制卡，用得不多，加上那两篇有说到，就略过。当然也有没发现的，欢迎各位使用nian。如“你瞅瞅你”说的倘使有一个念的展览大会，你会发现每一个都是不一样的。</p>
<p><code>下载地址</code> <a href="https://www.coolapk.com/apk/sa.nian.so">https://www.coolapk.com/apk/sa.nian.so</a></p>
<p>这里附上nian历史图标。






    
        
    


<a class="post-img-lb" href="https://ywycd.github.io/post/nian-tips/List_icon1.png" data-caption="List_icon1">
    <img src="https://ywycd.github.io/post/nian-tips/List_icon1.png" alt="List_icon1"  />
</a>






    
        
    


<a class="post-img-lb" href="https://ywycd.github.io/post/nian-tips/List_icon2.png" data-caption="List_icon2">
    <img src="https://ywycd.github.io/post/nian-tips/List_icon2.png" alt="List_icon2"  />
</a></p>

      ]]></content></entry><entry><title>Terminal Fail</title><id>https://ywycd.github.io/post/terminal-fail/</id><link href="https://ywycd.github.io/post/terminal-fail/" rel="alternate" type="text/html"/><updated>2020-12-19T11:13:26Z</updated><published>2020-11-05T04:08:19Z</published><description>折腾terminal主题失败，netlify显示不全。但灯大也是netlify部署的。 学习了alias和screen命令。 alias配置文件</description><content type="html"><![CDATA[
        <p>折腾terminal主题失败，netlify显示不全。但灯大也是netlify部署的。</p>
<p>学习了alias和screen命令。</p>
<p>alias配置文件在~/.bashrc。<code>source .bashrc</code>配置生效</p>
<p><code>screen -R name</code> Ctrl+A+D后台运行。输入<code>screen -R name</code>可再进入。</p>
<p>更新并推送博客</p>
<pre><code>cd blog
git add .
git commit -m &quot;update post&quot;
git push origin master
</code></pre><p><code>screen -ls</code>列出所有screen任务。<code>screen -X -S [session # number] quit</code>结束特定任务。</p>
<p><code>screen -wipe</code>清除任务（dead）。</p>
<p>








<a href="https://blog.olowolo.com/post/hugo-quick-start/" >Hugo 从入门到会用</a> 提到添加<code>hasCJKLanguage = true</code>，试了下终于有摘要！！继续折腾灯大修改版Terminal。<strong>根目录下模板优先级总是高于 /themes/同名模板</strong> 所以复制到博客目录进行修改。</p>
<p>修改archive格式，list.html里<code>.archive__post h3.archive__post-title </code>加<code>margin-right: 100px</code>。增加tagcloud，照content/archive.md内容新建tagcloud.md，菜单老是显示showmore。layouts/partials/menu.html修改，mobile留一个就行。</p>
<p>然后部署到xx.github.io。中间没仔细看教程走弯路，部署完英文有点不一样，加入<code>extended: true</code>。toc用二级目录，代码高亮```后加入相应代码，可复制。github上有提到。</p>

      ]]></content></entry><entry><title>My First Post</title><id>https://ywycd.github.io/post/my-first-post/</id><link href="https://ywycd.github.io/post/my-first-post/" rel="alternate" type="text/html"/><updated>2020-12-18T06:46:45Z</updated><published>2020-10-31T07:55:06Z</published><description>跟随灯大脚步，博客从typecho换成hugo。也没几篇记录 起因 看到灯大说typecho参考链接，编辑要翻到最下面。再加上要加端口访问。 好像</description><content type="html"><![CDATA[
        <p><em>跟随灯大脚步，博客从typecho换成hugo。也没几篇记录</em></p>
<ul>
<li>起因</li>
</ul>
<p>看到灯大说typecho参考链接，编辑要翻到最下面。再加上要加端口访问。 好像设置nginx反代，就不用加端口。还是懒。 之前就看到那篇，今天有空就开干。 还是借用在线md编辑器。全局下载速度也慢，慢慢等啊</p>
<ul>
<li>步骤</li>
</ul>
<p>灯大和Hugo 从入门到会用和网上搜索参考 ##安装 下载二进制文件，在win10部署。解压后添加环境变量，注销账号cmd才运行hugo。 要用git命令，另外安了git</p>
<h2 id="建站">建站</h2>
<p>hugo new site blog</p>
<h2 id="添加主题">添加主题</h2>
<pre><code>cd xxx/blog;
git init;
git submodule add -b ttys3 https://github.com/ttys3/hugo-theme-terminal.git themes/terminal
echo 'theme = &quot;terminal&quot;' &gt;&gt; config.toml
</code></pre>
<h2 id="开始写作">开始写作</h2>
<p>hugo new post/my-first-post.md 开启Hugo内置的服务器 hugo server -D http://localhost:1313/ 可访问网站。</p>
<p>提示 &lt;$.Site.Params.FullWidthTheme&gt;: invalid value; expected bool 搜索在issues里找到答案。config.toml里加 [params] fullWidthTheme = false centerTheme = true</p>
<h2 id="首页没显示">首页没显示</h2>
<p>复制config.toml没用。看别人问题加时间也不行。有提到复制exampleSite里的。 试了下可以显示。格式错误。复制标题可以，修改就不行。但新建md错误。我误删什么了吧。</p>
<h2 id="中文乱码">中文乱码</h2>
<p>md编码改为utf-8。</p>
<h2 id="其他">其他</h2>
<p>默认tags = [&quot;&rdquo;, &ldquo;&quot;]
config.toml 加了<code>[taxonomies]</code>，要用tags: (换行)-
centerTheme = true 主题居中显示。
后面发现灯大修改是在tty3分支。进terminal用<code>git checkout ttys3</code>切换，git pull发现已经最新。首页终于出现图片。
emmm最后还是换成了even主题。灯大主题部署到netlify显示不完全，文章没有内容摘要（不知道第一篇怎么就显示），一样内容even就有摘要。</p>

      ]]></content></entry></feed>